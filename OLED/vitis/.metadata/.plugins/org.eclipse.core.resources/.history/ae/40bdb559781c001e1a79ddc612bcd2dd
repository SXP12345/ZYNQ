/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpiops.h"
#include "sleep.h"

#define GPIO_DEVICE_ID XPAR_XGPIOPS_0_DEVICE_ID

#define EMIO_LED1 		54
#define EMIO_LED2 		55
#define EMIO_LED3 		56
#define EMIO_LED4 		57
#define EMIO_OLED_SCK 	58
#define EMIO_OLED_MOSI 	59
#define EMIO_OLED_DC 	60
#define EMIO_OLED_RST 	61

XGpioPs_Config *ConfigPtr;
XGpioPs Gpio;

void OLEDTxDC(u8 data, u8 isNotCmd)
{
	u8 i;
	XGpioPs_WritePin(&Gpio, EMIO_OLED_SCK, 1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_DC, isNotCmd);
	usleep(1);
	for(i=7; i>=0; i--)
	{
		XGpioPs_WritePin(&Gpio, EMIO_OLED_SCK, 0);
		XGpioPs_WritePin(&Gpio, EMIO_OLED_MOSI, (cmd&(1<<i))>>i);
		usleep(1);
		XGpioPs_WritePin(&Gpio, EMIO_OLED_SCK, 1);
		usleep(1);
	}
	XGpioPs_WritePin(&Gpio, EMIO_OLED_SCK, 1);
}


void OLED_init(void)
{
	/* RST */
	XGpioPs_WritePin(&Gpio, EMIO_OLED_RST, 1);
	usleep(1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_RST, 0);
	usleep(1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_RST, 1);

	OLEDTxDC(0xae, 0);
	OLEDTxDC(0x00, 0);
	OLEDTxDC(0x10, 0);
	OLEDTxDC(0x40, 0);

	OLEDTxDC(0x81, 0);
	OLEDTxDC(0xcf, 0);
	OLEDTxDC(0xa1, 0);
	OLEDTxDC(0xc8, 0);
	OLEDTxDC(0xa6, 0);
	OLEDTxDC(0xa8, 0);
	OLEDTxDC(0x3f, 0);
	OLEDTxDC(0xd3, 0);

	OLEDTxDC(0x00, 0);
	OLEDTxDC(0xd5, 0);

	OLEDTxDC(0x80, 0);

	OLEDTxDC(0xd9, 0);
	OLEDTxDC(0xf1, 0);
    halLcdSpiTxCmd(0xd9);  // --set pre-charge period
    halLcdSpiTxCmd(0xf1);  // --Set Pre-Charge as 15 Clocks & Discharge
                                    //   as 1 Clock
    halLcdSpiTxCmd(0xda);  // --set com pins hardware configuration
    halLcdSpiTxCmd(0x12);
    halLcdSpiTxCmd(0xdb);  // --set vcomh
    halLcdSpiTxCmd(0x40);  // --Set VCOM Deselect Level
    halLcdSpiTxCmd(0x20);  // --Set Page Addressing Mode (0x00/0x01/0x02)
    halLcdSpiTxCmd(0x02);  //
    halLcdSpiTxCmd(0x8d);  // --set Charge Pump enable/disable
    halLcdSpiTxCmd(0x14);  // --set(0x10) disable
    halLcdSpiTxCmd(0xa4);  // --Disable Entire Display On (0xa4/0xa5)
    halLcdSpiTxCmd(0xa6);  // --Disable Inverse Display On (0xa6/a7)
    halLcdSpiTxCmd(0xaf);  // --turn on oled panel
}


int main()
{
    init_platform();

    xil_printf("Hello World\n\r");
    xil_printf("Successfully ran Hello World application");
	xil_printf("GPIO MIO LED TEST!\n");
	/* 初始化GPIO的驱动 */
	// This function looks for the device configuration based on the unique device ID.
	ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	// This function initializes a XGpioPs instance/driver.
	XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr);

	/* 设置GPIO的方向*/
	XGpioPs_SetDirectionPin(&Gpio, EMIO_LED1, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_LED2, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_LED3, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_LED4, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_OLED_SCK, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_OLED_MOSI, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_OLED_DC, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_OLED_RST, 1);

	/* 设置输出使能 */
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_LED1, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_LED2, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_LED3, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_LED4, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_OLED_SCK, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_OLED_MOSI, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_OLED_DC, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_OLED_RST, 1);

	XGpioPs_WritePin(&Gpio, EMIO_LED1, 1);
	XGpioPs_WritePin(&Gpio, EMIO_LED2, 1);
	XGpioPs_WritePin(&Gpio, EMIO_LED3, 1);
	XGpioPs_WritePin(&Gpio, EMIO_LED4, 1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_SCK, 1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_MOSI, 1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_DC, 1);
	XGpioPs_WritePin(&Gpio, EMIO_OLED_RST, 1);

	while(1)
	{
		XGpioPs_WritePin(&Gpio, EMIO_LED1, 0);
		XGpioPs_WritePin(&Gpio, EMIO_LED2, 0);
		XGpioPs_WritePin(&Gpio, EMIO_LED3, 0);
		XGpioPs_WritePin(&Gpio, EMIO_LED4, 0);
		sleep(1);
		XGpioPs_WritePin(&Gpio, EMIO_LED1, 1);
		XGpioPs_WritePin(&Gpio, EMIO_LED2, 1);
		XGpioPs_WritePin(&Gpio, EMIO_LED3, 1);
		XGpioPs_WritePin(&Gpio, EMIO_LED4, 1);
		sleep(1);
	}

    cleanup_platform();
    return 0;
}
