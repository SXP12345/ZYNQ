#include "stdio.h"
#include "xparameters.h"
#include "xgpiops.h"
#include "sleep.h"

#define GPIO_DEVICE_ID XPAR_XGPIOPS_0_DEVICE_ID

#define MIO_PS_KEY1  0
#define EMIO_PL_KEY1 54
#define EMIO_PL_KEY2 55
#define EMIO_PL_LED1 56
#define EMIO_PL_LED2 57
#define EMIO_PL_LED3 58
#define EMIO_PL_LED4 59

XGpioPs_Config *ConfigPtr;
XGpioPs Gpio;

u32 MIO_KEY1 = 0;
u32 EMIO_KEY1 = 0;
u32 EMIO_KEY2 = 0;
u32 LED1 = 1;
u32 LED2 = 1;
u32 LED3 = 1;
u32 LED4 = 1;
u32 toggle(u32 LED);

int main()
{
	printf("GPIO MIO LED TEST!\n");
	/* 初始化GPIO的驱动 */
	// This function looks for the device configuration based on the unique device ID.
	ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	// This function initializes a XGpioPs instance/driver.
	XGpioPs_CfgInitialize(&Gpio, ConfigPtr, ConfigPtr->BaseAddr);

	/* 设置GPIO的方向*/
	XGpioPs_SetDirectionPin(&Gpio, MIO_PS_KEY1, 0);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_KEY1, 0);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_KEY2, 0);

	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_LED1, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_LED2, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_LED3, 1);
	XGpioPs_SetDirectionPin(&Gpio, EMIO_PL_LED4, 1);

	/* 设置输出使能 */
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_PL_LED1, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_PL_LED2, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_PL_LED3, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, EMIO_PL_LED4, 1);

	/* 写数据到GPIO的输出引脚 */

	while(1)
	{

		if(XGpioPs_ReadPin(&Gpio, MIO_PS_KEY1) == 0 && MIO_KEY1 == 0)
		{
			MIO_KEY1 = 1;
			toggle(LED1);
			toggle(LED4);
		}
		else
			MIO_KEY1 = 0;

		if(XGpioPs_ReadPin(&Gpio, EMIO_PL_KEY1) == 0 && EMIO_KEY1 == 0)
		{
			EMIO_KEY1 = 1;
			toggle(LED2);
			toggle(LED4);
		}
		else
			EMIO_KEY1 = 0;

		if(XGpioPs_ReadPin(&Gpio, EMIO_PL_KEY2) == 0 && EMIO_KEY2 == 0)
		{
			EMIO_KEY2 = 1;
			toggle(LED3);
			toggle(LED4);
		}
		else
			EMIO_KEY2 = 0;

		XGpioPs_WritePin(&Gpio, EMIO_PL_LED1, LED1);
		XGpioPs_WritePin(&Gpio, EMIO_PL_LED2, LED2);
		XGpioPs_WritePin(&Gpio, EMIO_PL_LED3, LED3);
		XGpioPs_WritePin(&Gpio, EMIO_PL_LED4, LED4);
		usleep(0.1);
	}
	return 0;
}


u32 toggle(u32 LED)
{
	if(LED == 1)
		LED = 0;
	else
		LED = 1;
	return LED;
}
